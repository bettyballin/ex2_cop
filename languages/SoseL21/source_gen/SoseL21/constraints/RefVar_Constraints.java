package SoseL21.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class RefVar_Constraints extends BaseConstraintsDescriptor {
  public RefVar_Constraints() {
    super(CONCEPTS.RefVar$81);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.target$2e6Y, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_i8w9vp_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            return ListScope.forNamedElements(Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getContextNode(), CONCEPTS.Worksheet$oW, false, false), LINKS.body$UV1L), CONCEPTS.Variable$Mu)).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.getIndexInParent(it) < SNodeOperations.getIndexInParent(_context.getContextNode());
              }
            }));
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_i8w9vp_a0a0a0a0a1a0a0a0c = new SNodePointer("r:a73ba4b3-d93c-46ec-8130-a5aa03a2c616(SoseL21.constraints)", "8714064409399014111");

  private static final class CONCEPTS {
    /*package*/ static final SConcept RefVar$81 = MetaAdapterFactory.getConcept(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee936948184b06L, "SoseL21.structure.RefVar");
    /*package*/ static final SConcept Worksheet$oW = MetaAdapterFactory.getConcept(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee936948184a3aL, "SoseL21.structure.Worksheet");
    /*package*/ static final SConcept Variable$Mu = MetaAdapterFactory.getConcept(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee9369481a0bc2L, "SoseL21.structure.Variable");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$2e6Y = MetaAdapterFactory.getReferenceLink(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee936948184b06L, 0x78ee936948184b0bL, "target");
    /*package*/ static final SContainmentLink body$UV1L = MetaAdapterFactory.getContainmentLink(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee936948184a3aL, 0x78ee936948184a3dL, "body");
  }
}
