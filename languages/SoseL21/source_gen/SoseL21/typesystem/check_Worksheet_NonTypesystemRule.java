package SoseL21.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.Sequence;
import SoseL21.behavior.Worksheet__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_Worksheet_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Worksheet_NonTypesystemRule() {
  }
  public void applyRule(final SNode wk, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Iterable<String> names = Sequence.fromIterable(Worksheet__BehaviorDescriptor.refVars_id7zI$Q_88ULG.invoke(wk)).select(new ISelector<SNode, String>() {
      public String select(SNode it) {
        return SPropertyOperations.getString(SLinkOperations.getTarget(it, LINKS.target$2e6Y), PROPS.name$MnvL);
      }
    });
    if (Sequence.fromIterable(names).count() > Sequence.fromIterable(names).distinct().count()) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(wk, "Worksheet has more than one reference to a variable", "r:10922487-ae60-4ee1-bba9-1ebb5e009fdc(SoseL21.typesystem)", "8714064409399677341", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Worksheet$oW;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink target$2e6Y = MetaAdapterFactory.getReferenceLink(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee936948184b06L, 0x78ee936948184b0bL, "target");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Worksheet$oW = MetaAdapterFactory.getConcept(0xc905bbb1e30c4548L, 0x898343d4ffd2305cL, 0x78ee936948184a3aL, "SoseL21.structure.Worksheet");
  }
}
